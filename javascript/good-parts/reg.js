// 正则表达式必须写在一行中
var parse_url = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/;
var url = "http:///www.ora.com:80/goodparts?q#fragment";
var result = parse_url.exec(url);

// 理解这段正则表达式

// ^ $ 分别是开头和结尾标志
// + 至少出现一次
// ？没有或仅有一次
// * 没有或出现多次
// . 除行结束符以外所有字符

// (?:([A-Za-z]+):)? 
// 1，(?:) 表示非捕获型分组。 
// 2， ([A-Za-z]+): ，（）属于捕获型分组， [A-Za-z] 26不区分大小写的个字母， + 出现 1 次或多次，：是字面量就表示冒号。
// 3， ?, 最后那个 ？ 表示出现 0 次或 1 次。  

// (\/{0,3}) 
// \ 表示转义， 转移后面的符号没有其他用途，仅仅当做符号
// {0, 3} 0~3 次

// ([0-9.\-A-Za-z]+)
// 由数字、点、中划线、字母组成的出现 1 次或多次
// 

// (?::(\d+))?
// 非捕获，: 和数字(捕获) 组成

// (?:\/([^?#]*))?
// / 开头，不是 ?# 的字符

// (?:\?([^#]*))?
// ? 开头，不是 # 的字符

// (?:#(.*))?
// # 开头，除行结束符以外所有字符

console.log('parse url result', result)


// 匹配数字
var parse_number = /^-?\d+(?:\.\d*)?(?:e[+\-]?\d+)?$/i;

// 最后的 i 表示不区分大小写



// 正则知识点

// []
// 表示字符的集和

// | 或   
// into.match(/in|int/) 只会匹配 in， 如果按顺序则优先匹配 第一个。

// 转义大写常常与转义小写表示相反的内容
// \d 表示 [0-9]
// \s 表示空白
// \w [0-9_a-zA-Z]

// 需要被转义的特殊字符
// - / [ ] \ ^

// 量词
// {3} 出现 3 次
// {1,3} 出现 1， 2， 3 次
// {1,} 出现 1 次， 或大于 1 次


